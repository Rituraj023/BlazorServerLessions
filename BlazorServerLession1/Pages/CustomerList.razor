@page "/customers"


@inject CustomerService CustomerService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Customers</h3>

<button class="btn btn-primary" @onclick="AddCustomer">Add New Customer</button>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.Name</td>
                    <td>@customer.Email</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => EditCustomer(customer.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCustomer(customer.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Customer> customers;

    protected override async Task OnInitializedAsync()
    {
        customers = CustomerService.GetAllCustomers();
    }

    void AddCustomer()
    {
        NavigationManager.NavigateTo("/customer/add");
    }

    void EditCustomer(int customerId)
    {
        NavigationManager.NavigateTo($"/customer/edit/{customerId}");
    }

    // void DeleteCustomer(int customerId)
    // {
    //     CustomerService.DeleteCustomer(customerId);
    //     customers = CustomerService.GetAllCustomers(); // Refresh the list
    // }

    private async Task DeleteCustomer(int customerId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this customer?");
        if (confirmed)
        {
            CustomerService.DeleteCustomer(customerId);
            customers = CustomerService.GetAllCustomers(); // Refresh the list
            await JSRuntime.InvokeVoidAsync("alert", "Customer deleted successfully.");
        }
        else
        {
            // Optionally handle the cancellation
            await JSRuntime.InvokeVoidAsync("alert", "Operation cancelled.");
        }

        StateHasChanged(); // Ensure the UI is updated
    }

}
